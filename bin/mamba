#!/usr/bin/env ruby
require 'thor'
require 'daemons'

class Mamba < Thor
	include Thor::Actions

	default_task :create
	check_unknown_options!()

	desc "create", "Create a Mamba instance"
	method_option :app,          :default => "", :option => :required, :aliases => "-a", :desc => "Path to an executable (ex. /Applications/Preview.app/Contents/MacOS/Preview)" 
	method_option :distributed,  :type => :boolean, :default => false,			:aliases => "-d", :desc => "Set the fuzzer type as distributed " 
	method_option :executor,     :default => "appscript", 	:aliases => "-e", :desc => "Type of executor to use (cli, appscript)" 
	method_option :name,		 :option => :required, :aliases => "-n", :desc => "Name of the fuzzer"
	method_option :organizer,    :type => :boolean, :default => false, 		:aliases => "-o", :desc => "Sets the fuzzer instance as the organizer of the distributed fuzzing" 
	method_option :port,         :type => :numeric, :default => 27017, 		:aliases => "-p", :desc => "Port for distributed fuzzing"  
	method_option :timeout,      :type => :numeric, :default => 0, 			:aliases => "-t", :desc => "Time to run an executable for each testcase in seconds (ex. 20)" 
	method_option :server,       :default => "fuzz.io", 	:aliases => "-s", :desc => "Server address for distributed fuzzing (ex. fuzz.io)" 
	method_option :uuid,         :default => "", 			:aliases => "-u", :desc => "nique ID for a distributed fuzzing job" 
	method_option :type,         :default => "Mangle", 		:aliases => "-y", :desc => "Type of fuzzer to create" 
	def create()
		puts "Creating a mamba instance"
		["configs", "databases", "disassemblies", "logs", "models", "queues", "tests"].each do |dirname|
			empty_directory options[:name] + "/" + dirname
		end
	end

	desc "start", "Start a Mamba Fuzzer"
	def start()
		puts "Starting Mamba"

		#
		# Daemonize the current process
		#
		daemon_options = {
			:app_name	=> "Mamba File Fuzzer",
			:multiple	=> false,
			:dir_mode	=> :normal,
			:dir		=> FileUtils.pwd(),
			:backtrace  => true
		}

		Daemons.run_proc("mambafuzzer", daemon_options) do
			sleep(5000)
		end
	end

	desc "stop", "Stop a Mamba Fuzzer"
	def stop()
		puts "Stopping Mamba"
		pid_files = Daemons::PidFile.find_files(FileUtils.pwd(), "mambafuzzer")
		Process.kill('SIGINT', File.open(pid_files[0]).readline().chomp().to_i())
	end

	desc "package", "Package Fuzzer Configuration Files"
	def package()
		puts "Packaging Files"
	end

	desc "unpackage", "Unpackage Fuzzer Configuration Files"
	def unpackage()
		puts "Unpackaging Files"
	end

	desc "database_start", "Start the Mongodb database for distribution"
    def database_start() 
        puts "Starting Mongodb database"
        mongod = File.dirname(__FILE__) + "/../../../ext/mongodb/mongodb-osx-x86_64-1.6.5/bin/mongod"
        storageDir = Dir.pwd + "/databases/"
        logFile = storageDir + "mongodb.log"
        system("#{mongod} --fork --logpath #{logFile} --logappend --dbpath #{storageDir}")
    end	

    desc "database_stop", "Stop the Mongodb database for distribution"
    def database_stop() 
        puts "Stopping Mongodb database"
        storageDir = Dir.pwd + "/databases/"
        lockFile = storageDir + "mongod.lock"
        lock = File.new(lockFile, "r")
        pid = lock.readline().to_i()
        lock.close()
        Process.kill("SIGTERM", pid)
    end

    desc "queue_start", "Start the rabbitmq queueing system"
	def queue_start() 
		puts "Starting rabbitmq queueing system"
		rabbitmq = File.dirname(__FILE__) + "/../../../ext/rabbitmq/rabbitmq-server-2.3.1/scripts/rabbitmq-server"
		queueBaseDir = Dir.pwd + "/queues"
		queueLogDir = Dir.pwd + "/logs/rabbitmq"
		system("export RABBITMQ_MNESIA_BASE=#{queueBaseDir}; export RABBITMQ_LOG_BASE=#{queueLogDir}; #{rabbitmq} -detached")
	end	

	desc "queue_reset", "Resetting the rabbitmq queueing system"
    def queue_reset() 
        rabbitmqctl = File.dirname(__FILE__) + "/../../../ext/rabbitmq/rabbitmq-server-2.3.1/scripts/rabbitmqctl"
        system("#{rabbitmqctl} force_reset")
    end

    desc "queue_stop", "Stop the rabbitmq queueing system"
    def queue_stop() 
        puts "Stopping the rabbitmq queueing system"
        rabbitmqctl = File.dirname(__FILE__) + "/../../../ext/rabbitmq/rabbitmq-server-2.3.1/scripts/rabbitmqctl"
        system("#{rabbitmqctl} stop")
    end

	desc "distrib_start", "Start all distributed fuzzing components"
	def distrib_start() 
		puts "Started the distributed environment"
		#		%w(queue_start database_start).each |distTask| do
		#			invoke :task
		#		end
	end

	desc "distrib_stop", "Stop all distributed fuzzing components"
	def distrib_stop() 
		puts "Stopped the distributed environment"
#		%w(queue_stop, database_stop).each |distTask| do
#			invoke :
#		end
	end

	no_tasks do

		def generate_config()

		end

		def create_config()

		end
	end

	# To Run Other Tasks Do: In the method
#	invoke :connect_to_database
end


Mamba.start()
